# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_DEFAULT_REGION: "us-east-1"

jobs:

  check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: gradle
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Validate Gradle wrapper
      uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b
    - run: ./gradlew build 
  
  Caching_dependens:
    runs-on: ubuntu-latest
    needs: check
    steps:
     - uses: actions/checkout@v2
     - name: Set up JDK 11
       uses: actions/setup-java@v2
       with:
        java-version: '11'
        distribution: 'adopt'
        cache: gradle
     - name: Grant execute permission for gradlew
       run: chmod +x gradlew
     - name: Validate Gradle wrapper
       uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b
     - name: Build with Gradle
       run: ./gradlew build
     - name: Cleanup Gradle Cache
    # Remove some files from the Gradle cache, so they aren't cached by GitHub Actions.
    # Restoring these files from a GitHub Actions cache might cause problems for future builds.
       run: |
        rm -f ~/.gradle/caches/modules-2/modules-2.lock
        rm -f ~/.gradle/caches/modules-2/gc.properties
  
  build:

    runs-on: ubuntu-latest
    needs: Caching_dependens
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: gradle
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Validate Gradle wrapper
      uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b
    - run: ./gradlew assemble
    - name: Zip lambda artifact
    - run: |
          zip micronautguide-0.1-all.zip micronautguide-0.1-all.jar
    - uses: actions/upload-artifact@v2
      with:
       name: app-demo
       path: build/libs/micronautguide-0.1-all.zip
       
  deploy:
    runs-on: ubuntu-latest
    needs: build
    env:
      WORK_DIR: "./terraform"
    
    outputs:
      api_endpoint: ${{ steps.apply_step.outputs.endpoint }}

    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      
      - uses: actions/download-artifact@main
        with:
          name: app-demo
          path: ./

      - name: Move artifact to terraform dir
        run: mv ./micronautguide-0.1-all* ./terraform/micronautguide-0.1-all*

      - name: Terraform Init
        working-directory: ${{ env.WORK_DIR }}
        run: terraform init

      - name: Terraform Format
        working-directory: ${{ env.WORK_DIR }}
        run: terraform fmt -check

      - name: Terraform Plan
        working-directory: ${{ env.WORK_DIR }}
        run: terraform plan

      - name: Terraform Apply
        working-directory: ${{ env.WORK_DIR }}
        id: apply_step
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          terraform apply -auto-approve
          echo "::set-output name=endpoint::$(terraform output -raw base_url)/api"
  test:
    runs-on: ubuntu-latest
    needs: deploy

    env:
      ENDPOINT: ${{ needs.deploy.outputs.api_endpoint }}

    steps:
      - name: Check "GET"
        run: |
          curl $ENDPOINT
      - name: Check "POST"
        run: |
          curl --header "Content-Type: application/json" --data '{"username":"xyz","password":"xyz"}' $ENDPOINT
      - name: Check "PUT"
        run: |
          curl -X PUT --header "Content-Type: application/json" --data '{"username":"xyz","password":"xyz"}' $ENDPOINT
  destroy:
    runs-on: ubuntu-latest
    needs: test
    env:
      WORK_DIR: "./terraform"

    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Terraform Init
        working-directory: ${{ env.WORK_DIR }}
        run: terraform init

      - name: Terraform Destroy
        working-directory: ${{ env.WORK_DIR }}
        run: terraform destroy --auto-approve
